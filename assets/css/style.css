@import url('https://fonts.googleapis.com/css?family=Roboto:100,200,300,400,500,600,700|Exo:100,200,300,400,500,600,700');
/* -------------------------------------------------Colours*/

.bg-color-name-title {
    background-color: #676767;
}

.bg-color-three-reasons {
    background-color: #fff;
}
.bg-color-personal-info {
    background-color: #f4f4f4;
}

.bg-color-work-history {
    background-color: #9b59b6;
}
.ui-menu-color-home {
    background-color: #e67e22;
}

.ui-menu-color-resume {
    background-color: #9b59b6;
}

.ui-menu-color-contact {
    background-color: #3498db;
}

.ui-menu-color-download {
    background-color: #525252;
}

/* -------------------------------------------------special paddings/margins/text */
h1,
h2,
h3,
h4 {
    margin: 0;
}

.uppercase {
    text-transform: uppercase;
}

.general-sub {
    font-family: 'Exo', sans-serif;
    font-weight: 300;
    color: #fafafa;
}

.inline-block {
    display: inline-block
}

.row-table{
    display:table; /*By doing this, we can then specify its child columns as table cells, as we mentioned before, which as we've said, ensures that the columns will remain equal height, regardless of their content.*/
}

.section-column {
    display: table-cell;
    padding: 0 30px 30px;
    float: none;
}
.history-heading,
.section-heading {
    font-family: "Exo", sans-serif;
    font-weight: 300;
    margin-top: 25px;
    margin-bottom: 40px;
}
/* -------------------------------------------------Heading*/
header {
    margin: 0;
}

.heading {
    margin-left: 50px;
}

.logo {
    background: url("../images/rosie.jpg");
    background-position: center;
    background-repeat: no-repeat;
    /*not tile*/
    background-size: cover;
    /* cover the container its in*/
    min-height: 360px;
    transition: all .5s ease-in-out;
    -moz-transition: all .5s ease-in-out;
    -webkit-transition: all .5s ease-in-out;
}

.name {
    font-family: 'Exo', sans-serif;
    font-weight: 100;
    font-size: 46px;
    margin-top: 50px;
    color: #ffffff;
}

.title {
    font-family: 'Roboto', sans-serif;
    font-weight: 200;
    font-size: 28px;
    margin-top: 20px;
    margin-bottom: 90px;
    color: #ffffff;


}

.list-inline-item:not(:last-child) {
    margin: 0;
}

/*When we display items inline, then the white space that's in our HTML file becomes visible as a single space between our items.*/

.menucontainer {
    font-size: 0;

}

/*The problem is that means that all of our items will then have a font-size of 0, so we can no longer see them.
We can override this by using our nav ID, targeting all the children lis and giving a font-size of 14px.
We'll then also just set the padding to 0 as well because we want to have full control over that.*/

#nav {
    margin: 0;
}

#nav li {
    font-size: 14px;
    padding: 0;
}

.menuitem {
    height: 120px;
    /* 3rd of section*/
    text-align: center;
    padding: 0;

}

.menuitem a {
    width: 100%;
    text-decoration: none;
    color: #fff;
    height: 120px;

}

.menuitem a i {
    /*We're also going to use display block so that the icon appears on a line of its own.
    It will start and end with a new line.
    Normally, the i element is inline.*/
    padding-top: 22px;
    display: block;
    color: #fafafa;
    font-size: 26px;

}

.menuitem span {
    display: block;
    width: 100%;
    padding-top: 5px;
    text-align: center;
    text-transform: uppercase;
    font-size: 14px;
    font-weight: 300;
    letter-spacing: 2px;
}

/*--------------------------------------------Hover.css*/

.hvr-sweep-to-bottom:before {
    background: rgba(0, 0, 0, 0.2);
    height: 120px;
}

/*--------------------------------------------Footer*/
footer {
    background-color: #525252;
    color: #fafafa;
    min-height: 120px;
    margin: 0;
}

.cv-pdf i {
    font-size: 18px;
    color: #fafafa;
    text-align: center;
    padding-left: 5px;
    transition: all 0.35s ease-in-out;
    /* always in the parent element color changes in the child*/
    -moz-transition: all 0.35s ease-in-out;
    -webkit-transition: all 0.35s ease-in-out;
    -o-transition: all 0.35s ease-in-out;
}

.cv-pdf i:hover {
    color: #e84610;
}
.social-links { 
    padding-bottom:15px;

}
.social-links li a i { 
    width:32px;
    height:32px;
    padding:12px 0;
    border-radius: 50%;
    font-size:13px;
    line-height:7px;
    text-align:center;
    color:#fafafa;
    background: #8f8f8f;
    transition: all 0.35s ease-in-out;
    /* always in the parent element color changes in the child*/
    -moz-transition: all 0.35s ease-in-out;
    -webkit-transition: all 0.35s ease-in-out;
    -o-transition: all 0.35s ease-in-out;   
}

.social-links li a i:hover { 
    background: #e84610;
}
#footer-details {
    padding:20px
}


/* ----------------------------------------Three Reasons */

.three-reasons-icon {
    font-size: 26px;
    color: #e67e22;
}

.three-reasons-heading {
    margin-bottom: 15px;
}

/* ----------------------------------------Personal Info */

.personal-info-item {
    margin-bottom: 20px;
    display: block; /* We're also going to set the display to block, so it will start and end with a newline and occupy the entirety of the horizontal space.*/
    clear: both; /* Then we're going to set the clear to both so that no other items can appear at either side of it in case, we were using floats. */
}

.personal-info-item .key,
.personal-info-item .value {
    padding-right: 8px;
    display: inline-block;
}

.personal-info-item .key p,
.personal-info-item .value p {
    margin: 0;
}

.personal-info-item .key {
    width: 30%;
    margin-right: 21px;
    padding-top: 2px;
    vertical-align: top;
}
.personal-info-item .key p {
    font-weight: 700;
}

.personal-info-item .value {
    position: relative;
    width: 60%;
}

/* ----------------------------------------history-heading */
.history-heading {
    color: #fafafa;
    margin-bottom: 50px;
}

.timeline-item {
    padding: 4em 2em 0em 2em;
    position: relative;
    /*The position of our timeline-item is going to be relative.
This is because we're going to have some absolute children that we want to style inside this*/
    color: #fafafa;
    border-left: 1px solid; /*for the timeline*/
}

.timeline-item p { /*for the row*/
    padding: 0;
    margin: 0;
}

.timeline-item:before {
    /*to contiain the dates  -Now what we're going to do with the before pseudo element here is to zero in and to target
our data-dates attribute.
We do that by using our content property.
Now, you can only use content with the before or after pseudo elements.
This sets the content that will appear either before or after the class in question.
We're going to set the content to use the attr() function, which is short for attribute.
Then we're going to grab the data-dates attribute.
So that will be the content, our dates.
*/
    content: attr(data-dates);
    position: absolute;
    left: 2.5em;
    top: 3em;
    display: block;
    font-family: "Exo", sans-serif;
    font-weight: 500; /*bolder*/
    font-size: 0.8em;
    padding: 0;
    margin: 0;
}

.timeline-item:after {
    width: 12px;
    height: 12px; /*to give a sqauare*/
    display: block;
    top: 2.4em;
    position: absolute; /*inside parent div*/
    left: -6px; /*to bring it out*/
    border-radius: 12px;/*histh and width of sq*/
    content: ''; /*nothing in there*/
    background: #fafafa;
}

.history-items {
    margin-bottom: 30px;
}